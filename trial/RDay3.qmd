---
title: "Streamlining with R"
author: "Murera Gisa <br>Senior Data Scientist<br>August, 2024"
format: 
  revealjs:
    footer: "[My Blog](https://mgisa.github.io/myblog)&nbsp;&nbsp;&nbsp;"
    theme: [moon, custom.scss]
    preview-links: auto
    chalkboard: 
      boardmarker-width: 5
from: markdown+emoji
execute:
  echo: true
---

## Outline

::: {.incremental}

- Working with Vectors and Matrices in R :wave:
- Mathematical Operations and Logic :arrow_down:
- Break :clock9:
- Conditional Statement, Loops and Iteration  :heavy_check_mark:
- Custom Functions in R :clipboard:
- Statistical Testing in R

:::

---

## Vector Operations

::: {.incremental}

- What is a vector in R?
- Creating vectors: (`c()`, `seq()`, `rep()`)
- Basic vector operations (*addition*, *subtraction*, *multiplication*, *division*)
- Accessing elements in vectors (*indexing*, *slicing*)
- Vectorized operations (working on entire vectors at once)

:::

---

## Hands-on Exercises

- Create numeric, character, and logical vectors.
- Perform basic arithmetic operations on two vectors.
- Slice and extract specific elements from a vector.

```{r}
# Create two vectors and perform element-wise addition
v1 <- c(1, 2, 3)
v2 <- c(4, 5, 6)
v_sum <- v1 + v2
print(v_sum)

```

---

## Matrices

::: {.incremental}

- What is a matrix in R?
- Creating matrices (`matrix()`, `rbind()`, `cbind()`)
- Basic matrix operations (addition, subtraction, multiplication)
- Accessing matrix elements (rows, columns, and specific elements)

:::

---

## Hands-on Exercises

- Create a matrix using the `matrix()` function.
- Extract specific rows and columns from a matrix.
- Perform matrix multiplication

```{r}
# Create a 3x3 matrix and perform matrix multiplication
m <- matrix(1:9, nrow = 3, byrow = TRUE)
m_product <- m %*% m
print(m_product)

```

---

## Operations and Logic on Vector and Matrices

::: {.incremental}

- Element-wise operations on vectors and matrices
- Matrix multiplication (`%*%`)
- Transpose of a matrix (`t()`)
- Determinants (`det()`), inverses (`solve()`), eigenvalues (`eigen()`)

:::

---

## Hands-on Exercises

- Perform element-wise multiplication of vectors and matrices.
- Find the transpose, determinant, and inverse of a matrix.

```{r}
# Find the determinant of a 2x2 matrix
mat <- matrix(c(4, 2, 7, 5), nrow = 2)
det(mat)

```

---

## Conditional Statement and Logic in R

::: {.incremental}

- `if`, `else`, and `else if` statements
- Logical operators (`>`, `<`, `==`, `!=`, `&&`, `||`)
- Vectorized comparison
:::

---

## Hands-on Exercises

- Write a function that uses `if` statements to compare two numbers.
- Use logical operators to subset a vector based on conditions.

```{r}
# Check if a number is positive or negative
x <- -5
if (x > 0) {
  print("Positive")
} else {
  print("Negative")
}

```

---

## Loops and Iteration

> `for` loop

::: {.incremental}
- Structure of `for` loops
- Looping through vectors and matrices
- Nested loops
:::

---

## Hands-on Exercises

- Loop through a vector and print each element.
- Loop through a matrix and calculate the sum of each row.

```{r}
# Loop through a vector and print each element
vec <- c(1, 2, 3, 4)
for (i in vec) {
  print(i)
}

```
---

## CONT'D

> `while` and `repeat` Loops

::: {.incremental}

- Structure of `while` and `repeat` loops
- When to use `while` loops
- Breaking out of loops (`break`, `next`)
:::

---

## Hands-on Exercises

- Write a `while` loop to calculate the sum of numbers up to a limit.
- Use `next` to skip specific iterations of a loop.

```{r}
# Calculate the sum of numbers from 1 to 10 using a while loop
sum <- 0
i <- 1
while (i <= 10) {
  sum <- sum + i
  i <- i + 1
}
print(sum)

```

---

## Writing Custom Functions in R

::: {.incremental}
- Syntax for writing functions (function())
- Input arguments and return values
- Local vs global variables
- Function scoping rules
:::

---

## Exercises 1

- Write a function to calculate the sum of squares of a vector.
- Write a function that takes a matrix as input and returns the diagonal elements

```{r}
# Function to calculate the sum of squares of a vector
sum_of_squares <- function(vec) {
  return(sum(vec^2))
}
vec <- c(1, 2, 3)
sum_of_squares(vec)

```

---

### Exercise 2

```{r}

# Function for matrix multiplication
mat_mult <- function(mat1, mat2) {
  return(mat1 %*% mat2)
}
mat1 <- matrix(1:4, nrow = 2)
mat2 <- matrix(5:8, nrow = 2)
mat_mult(mat1, mat2)

```

## Statistical Testing in R

> Topic: 

::: {.incremental}

- What is hypothesis testing?
- Null hypothesis (`H0`) vs. Alternative hypothesis (`H1`)
- Type I and Type II errors
- P-values and significance levels (`α)`
:::

> The hypothesis testing, including t-tests, F-tests, and Chi-Square tests, giving them a solid foundation for working with data statistically.

---

## CONT'D

> Explanation:

- Hypothesis testing helps determine if there is enough evidence in a dataset to reject a null hypothesis.
- The p-value shows how likely it is that the observed data occurred under the null hypothesis.

> Example:

If you're testing whether the average salary of two groups is the same, you can perform a t-test to see if any observed difference is statistically significant.
---

## t-Test

- When to use a t-test (comparing means of two groups)
- One-sample t-test: Comparing the sample mean to a known value
- Two-sample t-test: Comparing means of two independent groups
- Paired t-test: Comparing means of two related groups (e.g., before and after treatment)

---

### CONT'D

> When to Use?

- Use a one-sample t-test when you want to compare the sample mean to a specific value.
- Use a two-sample t-test when you want to compare the means of two independent groups (e.g., testing if two medications have the same effect).
- Use a paired t-test when your samples are related, like measuring the impact of a treatment on the same group over time
---

## Exercises

- Perform a one-sample t-test to check if the mean of a sample is significantly different from a known value.
- Perform a two-sample t-test to compare the means of two different groups.

```{r}
# One-sample t-test: Is the average weight of a sample different from 70 kg?
weights <- c(65, 70, 72, 68, 74)
t.test(weights, mu = 70)

```

---

## Paired t-test

```{r}
# Paired t-test: Before and after treatment
before <- c(68, 70, 65, 72, 74)
after <- c(65, 67, 63, 71, 70)
t.test(before, after, paired = TRUE)

```



## F-Test for Variance

> Topic:

- What is an F-test?
- Comparing variances between two groups
- Assumptions of the F-test (normality, independence)
---

## CONT'D

> When to Use:

- Use an F-test when you need to compare the variances of two independent groups to check if they are significantly different. 
- This is particularly important before performing a t-test because equal variances are often assumed.
---

## Exercises

- Perform an F-test to compare the variances of two independent groups.

```{r}
# Perform an F-test to compare variances of two groups
group1 <- c(8, 9, 10, 11, 12)
group2 <- c(6, 7, 8, 9, 10)
var.test(group1, group2)

```

---

## Chi-Square Test

> Topic: 

- When to use a Chi-Square test?
- Testing for independence between two categorical variables
- Interpreting the Chi-Square statistic and p-value

---

## CONT'D

> When to Use: 

- Use a _Chi-Square_ test when you want to test for an association between two categorical variables, such as determining if gender and preference for a product are related.
---

## Exercises

- Perform a Chi-Square test to check if there’s a relationship between two categorical variables.

```{r}
# Chi-square test for independence between two categorical variables
data <- matrix(c(50, 30, 20, 40), nrow = 2)
chisq.test(data)

```


## Assignment 

> Combine the skills learned over the sessions to complete the following:

- Write a function that takes two matrices as input, performs matrix multiplication, and returns the result.
- Write a function that takes a vector and a threshold as input, and returns the sum of elements greater than the threshold.
- Use a `for` loop to calculate the row-wise sum of a matrix.
- Use conditional statements to classify the sum from step 3 as "Low", "Medium", or "High".
- Use a paired t-test to compare the maths marks of a group of first and second assignments.
- Use an F-test to check if the variances of two independent groups are significantly different.
- Use a Chi-Square test to determine if there’s an association between two categorical variables (e.g., gender and product preference).
---

## Assignment Submission

<br>

> Submit your R scripts that include the solutions to the assignment.